from aiogram import Router, F, Bot
from aiogram.filters import Command, BaseFilter, CommandObject
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, delete
from sqlalchemy.orm import selectinload
from loguru import logger
from datetime import datetime, timedelta

from core.database.models import Server, Tariff, User, Subscription, Transaction, GiftCode
from core.config import settings
from core.utils.security import encrypt_password
from core.services.xui_client import get_client, XUIClientError

router = Router()

# --- –§–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
class IsAdmin(BaseFilter):
    async def __call__(self, message: Message | CallbackQuery) -> bool:
        admin_ids = [int(admin_id.strip()) for admin_id in settings.ADMIN_IDS.split(',')]
        return message.from_user.id in admin_ids

# --- FSM –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ---
class AdminFSM(StatesGroup):
    # Add Server
    add_server_name = State()
    add_server_api_url = State()
    add_server_api_user = State()
    add_server_api_password = State()
    add_server_inbound_id = State()
    # Add Tariff
    add_tariff_name_ru = State()
    add_tariff_name_en = State()
    add_tariff_duration = State()
    add_tariff_price_rub = State()
    add_tariff_price_stars = State()
    # User Management
    find_user = State()
    edit_user_balance = State()
    edit_user_days = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ ---
async def get_main_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users_menu")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers_menu")],
        [InlineKeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", callback_data="admin_tariffs_menu")],
        [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
    ])

async def get_servers_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="admin_list_servers")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="admin_add_server_start")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")],
    ])

async def get_users_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user_start")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")],
    ])

async def get_tariffs_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", callback_data="admin_list_tariffs")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="admin_add_tariff_start")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")],
    ])

router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())





# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ ---



@router.callback_query(F.data == "admin_main_menu")
async def cq_admin_panel(callback: CallbackQuery):
    await callback.answer()
    keyboard = await get_main_admin_keyboard()
    await callback.message.edit_text("<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

@router.callback_query(F.data == "admin_panel_main")
async def callback_admin_panel_main(callback: CallbackQuery):
    await callback.answer()
    keyboard = await get_main_admin_keyboard()
    await callback.message.edit_text("<b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", reply_markup=keyboard)

# --- –û—Ç–º–µ–Ω–∞ FSM ---

@router.message(Command("cancel"))


# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ ---

@router.callback_query(F.data == "admin_servers_menu")
async def cq_servers_menu(callback: CallbackQuery):
    await callback.answer()
    keyboard = await get_servers_menu_keyboard()
    await callback.message.edit_text("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏</b>", reply_markup=keyboard)

@router.callback_query(F.data == "admin_list_servers")
async def cq_list_servers(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    servers = (await session.execute(select(Server).order_by(Server.id))).scalars().all()

    if not servers:
        await callback.message.edit_text(
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers_menu")]
            ])
        )
        return

    response_text = "<b>–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤:</b>\n\n"
    buttons = []
    for server in servers:
        status = "‚úÖ" if server.is_active else "‚ùå"
        response_text += f"{status} ID: <code>{server.id}</code> | {server.name}\n"
        buttons.append([InlineKeyboardButton(text=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å ID {server.id}", callback_data=f"admin_toggle_server_{server.id}")])
    
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_servers_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(response_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_toggle_server_"))
async def cq_toggle_server(callback: CallbackQuery, session: AsyncSession):
    server_id = int(callback.data.split("_")[-1])
    server = await session.get(Server, server_id)
    if not server:
        await callback.answer(f"–°–µ—Ä–≤–µ—Ä —Å ID {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    server.is_active = not server.is_active
    await session.commit()
    status = "–≤–∫–ª—é—á–µ–Ω" if server.is_active else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.answer(f"–°–µ—Ä–≤–µ—Ä {server.name} {status}")
    logger.info(f"Admin {callback.from_user.id} toggled server {server_id} to {status}")
    
    # Refresh the list
    await cq_list_servers(callback, session)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ ---

@router.callback_query(F.data == "admin_users_menu")
async def cq_users_menu(callback: CallbackQuery):
    await callback.answer()
    keyboard = await get_users_menu_keyboard()
    await callback.message.edit_text("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>", reply_markup=keyboard)

@router.callback_query(F.data == "admin_list_users")
async def cq_list_users(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    users = (await session.execute(select(User).options(selectinload(User.subscriptions)).order_by(User.id))).scalars().all()

    if not users:
        await callback.message.edit_text(
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_menu")]
            ])
        )
        return

    response_text = "<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    for user in users:
        status = "‚úÖ" if not user.is_banned else "üö´"
        response_text += f"{status} ID: <code>{user.telegram_id}</code> | @{user.username if user.username else 'N/A'}\n"
        response_text += f"   –î–Ω–∏: {user.unassigned_days} | –ë–∞–ª–∞–Ω—Å: {user.referral_balance / 100} RUB\n"
        response_text += f"   –ü–æ–¥–ø–∏—Å–∫–∏: {len([s for s in user.subscriptions if s.is_active and s.expires_at > datetime.utcnow()])}\n\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users_menu")]
    ])
    await callback.message.edit_text(response_text, reply_markup=keyboard)

@router.callback_query(F.data == "admin_tariffs_menu")
async def cq_tariffs_menu(callback: CallbackQuery):
    await callback.answer()
    keyboard = await get_tariffs_menu_keyboard()
    await callback.message.edit_text("<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏</b>", reply_markup=keyboard)

@router.callback_query(F.data == "admin_list_tariffs")
async def cq_list_tariffs(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    tariffs = (await session.execute(select(Tariff).order_by(Tariff.id))).scalars().all()

    if not tariffs:
        await callback.message.edit_text(
            "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tariffs_menu")]
            ])
        )
        return

    response_text = "<b>–°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤:</b>\n\n"
    buttons = []
    for tariff in tariffs:
        status = "‚úÖ" if tariff.is_active else "‚ùå"
        name_ru = tariff.name.get('ru', '[–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è]')
        name_en = tariff.name.get('en', '[no name]')
        response_text += f"{status} ID: <code>{tariff.id}</code> | {name_ru} / {name_en} ({tariff.duration_days} –¥.)\n"
        response_text += f"   –¶–µ–Ω–∞: {tariff.price_rub / 100} RUB | {tariff.price_stars} ‚≠êÔ∏è\n"
        buttons.append([
            InlineKeyboardButton(text=f"–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å ID {tariff.id}", callback_data=f"admin_toggle_tariff_{tariff.id}"),
            InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ID {tariff.id}", callback_data=f"admin_delete_tariff_confirm_{tariff.id}")
        ])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_tariffs_menu")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await callback.message.edit_text(response_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_delete_tariff_confirm_"))
async def cq_delete_tariff_confirm(callback: CallbackQuery, session: AsyncSession):
    tariff_id = int(callback.data.split("_")[-1])
    tariff = await session.get(Tariff, tariff_id)
    if not tariff:
        await callback.answer(f"–¢–∞—Ä–∏—Ñ —Å ID {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    name_ru = tariff.name.get('ru', f"ID {tariff_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_tariff_execute_{tariff_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_list_tariffs")]
    ])
    await callback.message.edit_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ \"{name_ru}\"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=keyboard)

@router.callback_query(F.data.startswith("admin_delete_tariff_execute_"))
async def cq_delete_tariff_execute(callback: CallbackQuery, session: AsyncSession):
    tariff_id = int(callback.data.split("_")[-1])
    tariff = await session.get(Tariff, tariff_id)
    if not tariff:
        await callback.answer(f"–¢–∞—Ä–∏—Ñ —Å ID {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    tariff.is_active = False
    await session.commit()
    logger.info(f"Admin {callback.from_user.id} deactivated tariff {tariff_id}")
    await callback.answer(f"–¢–∞—Ä–∏—Ñ ID {tariff_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Å–∫—Ä—ã—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", show_alert=True)
    await cq_list_tariffs(callback, session)


@router.callback_query(F.data.startswith("admin_toggle_tariff_"))
async def cq_toggle_tariff(callback: CallbackQuery, session: AsyncSession):
    tariff_id = int(callback.data.split("_")[-1])
    tariff = await session.get(Tariff, tariff_id)
    if not tariff:
        await callback.answer(f"–¢–∞—Ä–∏—Ñ —Å ID {tariff_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    tariff.is_active = not tariff.is_active
    await session.commit()
    status = "–≤–∫–ª—é—á–µ–Ω" if tariff.is_active else "–æ—Ç–∫–ª—é—á–µ–Ω"
    await callback.answer(f"–¢–∞—Ä–∏—Ñ {tariff.name} {status}")
    logger.info(f"Admin {callback.from_user.id} toggled tariff {tariff_id} to {status}")

    # Refresh the list
    await cq_list_tariffs(callback, session)

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---

@router.callback_query(F.data == "admin_stats")
async def cq_stats(callback: CallbackQuery, session: AsyncSession):
    await callback.answer()
    
    total_users = await session.scalar(select(func.count(User.id)))
    now = datetime.utcnow()
    users_today = await session.scalar(select(func.count(User.id)).where(User.created_at >= now - timedelta(days=1)))
    users_week = await session.scalar(select(func.count(User.id)).where(User.created_at >= now - timedelta(days=7)))
    active_subs = await session.scalar(select(func.count(Subscription.id)).where(Subscription.is_active == True, Subscription.expires_at > now))

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ 24 —á–∞—Å–∞: <b>{users_today}</b>\n"
        f"üìà –ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: <b>{users_week}</b>\n"
        f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <b>{active_subs}</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_main_menu")]
    ])
    await callback.message.edit_text(stats_text, reply_markup=keyboard)

# --- –ü—Ä–æ—Ü–µ—Å—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (FSM) ---

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
@router.callback_query(F.data == "admin_add_tariff_start")
async def cq_add_tariff_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminFSM.add_tariff_name_ru)
    await callback.message.edit_text(
        "<b>–®–∞–≥ 1/5: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ (RU)</b>\n–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä. üìÖ 30 –¥–Ω–µ–π).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_tariff_name_ru)
async def msg_add_tariff_name_ru(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered tariff name (RU): {message.text}")
    await state.update_data(name_ru=message.text)
    await state.set_state(AdminFSM.add_tariff_name_en)
    await message.answer(
        "<b>–®–∞–≥ 2/5: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ (EN)</b>\n–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä. üìÖ 30 days).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_tariff_name_en)
async def msg_add_tariff_name_en(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered tariff name (EN): {message.text}")
    await state.update_data(name_en=message.text)
    await state.set_state(AdminFSM.add_tariff_duration)
    await message.answer(
        "<b>–®–∞–≥ 3/5: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –¥–Ω—è—Ö)</b>\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_tariff_duration)
async def msg_add_tariff_duration(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    logger.info(f"Admin {message.from_user.id} entered tariff duration: {message.text}")
    await state.update_data(duration_days=int(message.text))
    await state.set_state(AdminFSM.add_tariff_price_rub)
    await message.answer(
        "<b>–®–∞–≥ 4/5: –¶–µ–Ω–∞ (–≤ –∫–æ–ø–µ–π–∫–∞—Ö)</b>\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ –∫–æ–ø–µ–π–∫–∞—Ö (–Ω–∞–ø—Ä. 19900 –¥–ª—è 199.00 RUB).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_tariff_price_rub)
async def msg_add_tariff_price_rub(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–≤ –∫–æ–ø–µ–π–∫–∞—Ö). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    logger.info(f"Admin {message.from_user.id} entered tariff price (RUB): {message.text}")
    await state.update_data(price_rub=int(message.text))
    await state.set_state(AdminFSM.add_tariff_price_stars)
    await message.answer(
        "<b>–®–∞–≥ 5/5: –¶–µ–Ω–∞ (–≤ Telegram Stars)</b>\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ Telegram Stars.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_tariff_price_stars)
async def msg_add_tariff_price_stars(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("–¶–µ–Ω–∞ –≤ Stars –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    logger.info(f"Admin {message.from_user.id} entered tariff price (Stars): {message.text}")
    await state.update_data(price_stars=int(message.text))
    
    data = await state.get_data()
    await state.clear()

    try:
        new_tariff = Tariff(
            name={"ru": data['name_ru'], "en": data['name_en']},
            duration_days=data['duration_days'],
            price_rub=data['price_rub'],
            price_stars=data['price_stars']
        )
        session.add(new_tariff)
        await session.commit()
        logger.info(f"Admin {message.from_user.id} successfully added new tariff: {data['name_ru']}")
        
        keyboard = await get_tariffs_menu_keyboard()
        await message.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ '{data['name_ru']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Failed to add new tariff. Admin: {message.from_user.id}. Data: {data}. Error: {e}")
        keyboard = await get_tariffs_menu_keyboard()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", reply_markup=keyboard)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
@router.callback_query(F.data == "admin_add_server_start")
async def cq_add_server_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminFSM.add_server_name)
    await callback.message.edit_text(
        "<b>–®–∞–≥ 1/5: –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä. üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_server_name)
async def msg_add_server_name(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered server name: {message.text}")
    await state.update_data(server_name=message.text)
    await state.set_state(AdminFSM.add_server_api_url)
    await message.answer(
        "<b>–®–∞–≥ 2/5: API URL</b>\n–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è API (–Ω–∞–ø—Ä. http://your.domain:54321).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_server_api_url)
async def msg_add_server_api_url(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered server API URL: {message.text}")
    await state.update_data(api_url=message.text)
    await state.set_state(AdminFSM.add_server_api_user)
    await message.answer(
        "<b>–®–∞–≥ 3/5: API User</b>\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è API.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_server_api_user)
async def msg_add_server_api_user(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered server API user: {message.text}")
    await state.update_data(api_user=message.text)
    await state.set_state(AdminFSM.add_server_api_password)
    await message.answer(
        "<b>–®–∞–≥ 4/5: API Password</b>\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è API.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_server_api_password)
async def msg_add_server_api_password(message: Message, state: FSMContext):
    logger.info(f"Admin {message.from_user.id} entered server API password.")
    encrypted_password = encrypt_password(message.text)
    await state.update_data(api_password=encrypted_password)
    await state.set_state(AdminFSM.add_server_inbound_id)
    await message.answer(
        "<b>–®–∞–≥ 5/5: Inbound ID</b>\n–í–≤–µ–¥–∏—Ç–µ ID –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (inbound).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.add_server_inbound_id)
async def msg_add_server_inbound_id(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("Inbound ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    logger.info(f"Admin {message.from_user.id} entered inbound ID: {message.text}")
    await state.update_data(inbound_id=int(message.text))
    
    data = await state.get_data()
    await state.clear()

    try:
        new_server = Server(
            name=data['server_name'],
            api_url=data['api_url'],
            api_user=data['api_user'],
            api_password=data['api_password'],
            inbound_id=data['inbound_id']
        )
        session.add(new_server)
        await session.commit()
        logger.info(f"Admin {message.from_user.id} successfully added new server: {data['server_name']}")
        
        keyboard = await get_servers_menu_keyboard()
        await message.answer(f"‚úÖ –°–µ—Ä–≤–µ—Ä '{data['server_name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Failed to add new server. Admin: {message.from_user.id}. Data: {data}. Error: {e}")
        keyboard = await get_servers_menu_keyboard()
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö.", reply_markup=keyboard)


# –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data == "admin_find_user_start")
async def cq_find_user_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(AdminFSM.find_user)
    await callback.message.edit_text(
        "<b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
        ])
    )

@router.message(AdminFSM.find_user)
async def msg_find_user(message: Message, state: FSMContext, session: AsyncSession):
    query = message.text.strip()
    user = None
    if query.isdigit():
        user = (await session.execute(select(User).where(User.telegram_id == int(query)))).scalars().first()
    else:
        user = (await session.execute(select(User).where(User.username == query.replace("@", "")))).scalars().first()

    if user:
        await state.clear()
        await cq_user_details(message, session, user)
    else:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_fsm")]
            ])
        )

async def get_user_management_keyboard(user: User) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=f"admin_edit_user_balance_start_{user.telegram_id}"),
            InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–Ω–∏", callback_data=f"admin_edit_user_days_start_{user.telegram_id}")
        ],
        [
            InlineKeyboardButton(
                text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_banned else "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"admin_toggle_user_block_{user.telegram_id}"
            ),
            InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_confirm_{user.telegram_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ö –ø–æ–∏—Å–∫—É", callback_data="admin_users_menu")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def cq_user_details(message: Message | CallbackQuery, session: AsyncSession, user: User):
    if isinstance(message, CallbackQuery):
        await message.answer()
        user_message = message.message
    else:
        user_message = message

    subscriptions = (await session.execute(select(Subscription).where(Subscription.user_id == user.telegram_id))).scalars().all()
    
    subs_text = ""
    if subscriptions:
        for sub in subscriptions:
            server = await session.get(Server, sub.server_id)
            subs_text += f"  - –°–µ—Ä–≤–µ—Ä: {server.name if server else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, –ò—Å—Ç–µ–∫–∞–µ—Ç: {sub.expires_at.strftime('%Y-%m-%d %H:%M')}, –ê–∫—Ç–∏–≤–Ω–∞: {'–î–∞' if sub.is_active else '–ù–µ—Ç'}\n"
    else:
        subs_text = "  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.\n"

    user_info = (
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n"
        f"ID: <code>{user.telegram_id}</code> (@{user.username if user.username else 'N/A'})\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_banned else '–ê–∫—Ç–∏–≤–µ–Ω'}\n"
        f"–Ø–∑—ã–∫: {user.language_code}\n"
        f"–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏: {user.unassigned_days}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user.referral_balance / 100} RUB\n"
        f"L2 –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {user.l2_referral_balance / 100} RUB\n"
        f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: {'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' if user.trial_used else '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}\n"
        f"–ü–µ—Ä–≤—ã–π VPN: {'–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' if user.activated_first_vpn else '–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'}\n"
        f"–†–µ—Ñ–µ—Ä–µ—Ä ID: {user.referrer_id if user.referrer_id else '–ù–µ—Ç'}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {user.referral_code if user.referral_code else '–ù–µ—Ç'}\n"
        f"–°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M')}\n"
        f"<b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n{subs_text}"
    )

    keyboard = await get_user_management_keyboard(user)
    # Use edit_text for callback queries and answer for messages
    if isinstance(message, CallbackQuery):
        await user_message.edit_text(user_info, reply_markup=keyboard)
    else:
        await user_message.answer(user_info, reply_markup=keyboard)

# --- User Management Actions ---

@router.callback_query(F.data.startswith("admin_toggle_user_block_"))
async def cq_toggle_user_block(callback: CallbackQuery, session: AsyncSession):
    user_telegram_id = int(callback.data.split("_")[-1])
    user = (await session.execute(select(User).where(User.telegram_id == user_telegram_id))).scalars().first()
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    user.is_banned = not user.is_banned
    await session.commit()
    
    status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_banned else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

    logger.info(f"Admin {callback.from_user.id} {status} user {user.telegram_id}")
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.telegram_id} {status}.")
    
    await cq_user_details(callback, session, user)

@router.callback_query(F.data.startswith("admin_delete_user_confirm_"))
async def cq_delete_user_confirm(callback: CallbackQuery, session: AsyncSession):
    user_telegram_id = int(callback.data.split("_")[-1])
    user = (await session.execute(select(User).where(User.telegram_id == user_telegram_id))).scalars().first()
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_user_execute_{user.telegram_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_show_user_details_{user.telegram_id}")]
    ])
    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user_id}?\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏.</b>",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("admin_delete_user_execute_"))
async def cq_delete_user_execute(callback: CallbackQuery, session: AsyncSession):
    user_telegram_id = int(callback.data.split("_")[-1])
    user = (await session.execute(select(User).where(User.telegram_id == user_telegram_id))).scalars().first()
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # 1. Find all user subscriptions
    subscriptions = (await session.execute(
        select(Subscription).where(Subscription.user_id == user.telegram_id)
    )).scalars().all()

    # 2. Attempt to delete clients from XUI panels
    if subscriptions:
        await callback.message.edit_text(f"–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ {len(subscriptions)} VLESS-–∫–ª–∏–µ–Ω—Ç–æ–≤ —Å VPN-—Å–µ—Ä–≤–µ—Ä–æ–≤...")
        for sub in subscriptions:
            server = await session.get(Server, sub.server_id)
            if not server:
                logger.warning(f"Server with ID {sub.server_id} not found for subscription {sub.id}. Skipping XUI deletion.")
                continue
            
            try:
                xui_client = get_client(server)
                await xui_client.delete_user(server.inbound_id, sub.xui_user_uuid)
                logger.info(f"Successfully deleted VLESS client {sub.xui_user_uuid} from server {server.name} for user {user.telegram_id}")
            except XUIClientError as e:
                logger.error(f"Failed to delete VLESS client {sub.xui_user_uuid} from server {server.name}. Error: {e}")
                # We continue anyway, to delete the user from the bot's DB
            except Exception as e:
                logger.error(f"An unexpected error occurred during XUI client deletion for user {user.telegram_id} on server {server.name}. Error: {e}")

    # 3. Delete user data from the bot's database
    await callback.message.edit_text("–£–¥–∞–ª—è—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...")
    await session.execute(delete(Subscription).where(Subscription.user_id == user.telegram_id))
    await session.execute(delete(Transaction).where(Transaction.user_id == user.telegram_id))
    await session.execute(delete(GiftCode).where(GiftCode.buyer_user_id == user.telegram_id))
    await session.execute(delete(GiftCode).where(GiftCode.activated_by_user_id == user.telegram_id))
    
    await session.delete(user)
    await session.commit()
    
    logger.warning(f"Admin {callback.from_user.id} DELETED user {user.telegram_id} and all their data.")
    await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username or user.telegram_id} –∏ –≤—Å–µ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    
    await cq_users_menu(callback)

# Callback to show user details (used for cancellation)
@router.callback_query(F.data.startswith("admin_show_user_details_"))
async def cq_show_user_details_from_callback(callback: CallbackQuery, session: AsyncSession):
    user_id = int(callback.data.split("_")[-1])
    user = await session.get(User, user_id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await cq_user_details(callback, session, user)

# --- FSM for Editing User ---

# Edit Balance
@router.callback_query(F.data.startswith("admin_edit_user_balance_start_"))
async def cq_edit_user_balance_start(callback: CallbackQuery, state: FSMContext):
    user_telegram_id = int(callback.data.split("_")[-1])
    await state.update_data(user_telegram_id=user_telegram_id)
    await state.set_state(AdminFSM.edit_user_balance)
    await callback.answer()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞</b> –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_show_user_details_{user_telegram_id}")]
        ])
    )

@router.message(AdminFSM.edit_user_balance)
async def msg_edit_user_balance(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    user = (await session.execute(select(User).where(User.telegram_id == data['user_telegram_id']))).scalars().first()
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–º–µ–Ω–∞.")
        await state.clear()
        return

    new_balance = int(message.text)
    old_balance = user.referral_balance
    user.referral_balance = new_balance
    await session.commit()
    await state.clear()
    
    logger.info(f"Admin {message.from_user.id} changed balance for user {user.telegram_id} to {new_balance}")
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username or user.telegram_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_balance / 100} RUB.")
    await cq_user_details(message, session, user)

# Edit Days
@router.callback_query(F.data.startswith("admin_edit_user_days_start_"))
async def cq_edit_user_days_start(callback: CallbackQuery, state: FSMContext):
    user_telegram_id = int(callback.data.split("_")[-1])
    await state.update_data(user_telegram_id=user_telegram_id)
    await state.set_state(AdminFSM.edit_user_days)
    await callback.answer()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b>–Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π</b> (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_show_user_details_{user_telegram_id}")]
        ])
    )

@router.message(AdminFSM.edit_user_days)
async def msg_edit_user_days(message: Message, state: FSMContext, session: AsyncSession):
    if not message.text.isdigit():
        await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    data = await state.get_data()
    user = (await session.execute(select(User).where(User.telegram_id == data['user_telegram_id']))).scalars().first()
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–º–µ–Ω–∞.")
        await state.clear()
        return

    new_days = int(message.text)
    old_days = user.unassigned_days
    user.unassigned_days = new_days
    await session.commit()
    await state.clear()

    logger.info(f"Admin {message.from_user.id} changed unassigned days for user {user.telegram_id} to {new_days}")
    await message.answer(f"–ù–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ –¥–ª—è @{user.username or user.telegram_id} –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ {new_days}.")
    await cq_user_details(message, session, user)
